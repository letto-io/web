env:
  browser: true
  node: true
  es6: true
  jasmine: true
  jquery: true

globals:
  Materialize: true

parserOptions:
  ecmaVersion: 6
  sourceType: module
  ecmaFeatures:
    generators: false
    objectLiteralDuplicateProperties: false

plugins:
  - import

settings:
  import/resolver:
    node:
      extensions:
        - .js
        - .json
  import/extensions:
    - .js
    - .jsx
  import/core-modules: []
  import/ignore:
    - node_modules
    - \\.(coffee|scss|css|less|hbs|svg|json)$

rules:
  # enforces getter/setter pairs in objects
  accessor-pairs: off

  # enforces return statements in callbacks of arrays methods
  array-callback-return: error

  # treat var statements as if they were block scoped
  block-scoped-var: error

  # specify the maximum cyclomatic complexity allowed in a program
  complexity:
    - off
    - 11

  # require return statements to either always or never specify values
  consistent-return: error

  # specify curly brace conventions for all control statements
  curly:
    - error
    - multi-line

  # require default case in switch statements
  default-case:
    - error
    - commentPattern: ^no default$

  # encourages use of dot notation whenever possible
  dot-notation:
    - error
    - allowKeywords: true

  # enforces consistent newlines before or after dots
  dot-location:
    - error
    - property

  # require the use of === and !==
  eqeqeq:
    - warn
    - allow-null

  # make sure for-in loops have an if statement
  guard-for-in: error

  # disallow the use of alert, confirm, and prompt
  no-alert: warn

  # disallow use of arguments.caller or arguments.callee
  no-caller: error

  # disallow lexical declarations in case/default clauses
  no-case-declarations: error

  # disallow division operators explicitly at beginning of regular expression
  no-div-regex: off

  # disallow else after a return in an if
  no-else-return: error

  # disallow empty functions, except for standalone funcs/arrows
  no-empty-function:
    - error
    - allow:
      - arrowFunctions
      - functions
      - methods

  # disallow empty destructuring patterns
  no-empty-pattern: error

  # disallow comparisons to null without a type-checking operator
  no-eq-null: off

  # disallow use of eval()
  no-eval: error

  # disallow adding to native types
  no-extend-native: error

  # disallow unnecessary function binding
  no-extra-bind: error

  # disallow Unnecessary Labels
  no-extra-label: error

  # disallow fallthrough of case statements
  no-fallthrough: error

  # disallow the use of leading or trailing decimal points in numeric literals
  no-floating-decimal: error

  # disallow reassignments of native objects or read-only globals
  no-global-assign:
    - error
    - exceptions: []

  # disallow implicit type conversions
  no-implicit-coercion:
    - off
    - boolean: false
      number: true
      string: true
      allow: []

  # disallow var and named functions in global scope
  no-implicit-globals: off

  # disallow use of eval()-like methods
  no-implied-eval: error

  # disallow this keywords outside of classes or class-like objects
  no-invalid-this: off

  # disallow usage of __iterator__ property
  no-iterator: error

  # disallow use of labels for anything other then loops and switches
  no-labels:
    - error
    - allowLoop: false
      allowSwitch: false

  # disallow unnecessary nested blocks
  no-lone-blocks: error

  # disallow creation of functions within loops
  no-loop-func: error

  # disallow magic numbers
  no-magic-numbers:
    - off
    - ignore: []
      ignoreArrayIndexes: true
      enforceConst: true
      detectObjects: false

  # disallow use of multiple spac
  no-multi-spaces: error

  # disallow use of multiline strings
  no-multi-str: error

  # disallow reassignments of native objects
  no-native-reassign: off

  # disallow use of new operator when not part of the assignment or comparison
  no-new: error

  # disallow use of new operator for Function object
  no-new-func: error

  # disallows creating new instances of String, Number, and Boolean
  no-new-wrappers: error

  # disallow use of (old style) octal literals
  no-octal: error

  # disallow use of octal escape sequences in string literals, such as
  # var foo = Copyright \251;
  no-octal-escape: error

  # disallow reassignment of function parameters
  # disallow parameter object manipulation
  # TODO: increase to error after refactoring
  no-param-reassign:
    - warn
    - props: true

  # disallow usage of __proto__ property
  no-proto: error

  # disallow declaring the same variable more then once
  no-redeclare: error

  # disallow use of assignment in return statement
  no-return-assign: error

  # disallow use of `javascript:` urls.
  no-script-url: error

  # disallow self assignment
  no-self-assign: error

  # disallow comparisons where both sides are exactly the same
  no-self-compare: error

  # disallow use of comma operator
  no-sequences: error

  # restrict what can be thrown as an exception
  no-throw-literal: error

  # disallow unmodified conditions of loops
  no-unmodified-loop-condition: off

  # disallow usage of expressions in statement position
  no-unused-expressions:
    - error
    - allowShortCircuit: false
      allowTernary: false

  # disallow unused labels
  no-unused-labels: error

  # disallow unnecessary .call() and .apply()
  no-useless-call: off

  # disallow useless string concatenation
  no-useless-concat: error

  # disallow unnecessary string escaping
  no-useless-escape: error

  # disallow use of void operator
  no-void: error

  # disallow usage of configurable warning terms in comments: e.g. todo
  no-warning-comments:
    - off
    - terms:
        - todo
        - fixme
        - xxx
      location: start

  # disallow use of the with statement
  no-with: error

  # require use of the second argument for parseInt()
  radix: error

  # requires to declare all vars on top of their containing scope
  vars-on-top: error

  # require immediate function invocation to be wrapped in parentheses
  wrap-iife:
    - error
    - outside

  # require or disallow Yoda conditions
  yoda: error

  # require trailing commas in multiline object literals
  comma-dangle:
    - error
    - always-multiline

  # disallow assignment in conditional expressions
  no-cond-assign:
    - error
    - always

  # disallow use of console
  no-console: warn

  # disallow use of constant expressions in conditions
  no-constant-condition: warn

  # disallow control characters in regular expressions
  no-control-regex: error

  # disallow use of debugger
  no-debugger: error

  # disallow duplicate arguments in functions
  no-dupe-args: error

  # disallow duplicate keys when creating object literals
  no-dupe-keys: error

  # disallow a duplicate case label.
  no-duplicate-case: error

  # disallow empty statements
  no-empty: error

  # disallow the use of empty character classes in regular expressions
  no-empty-character-class: error

  # disallow assigning to the exception in a catch block
  no-ex-assign: error

  # disallow double-negation boolean casts in a boolean context
  no-extra-boolean-cast: error

  # disallow unnecessary parentheses
  no-extra-parens:
    - off
    - all
    - conditionalAssign: true
      nestedBinaryExpressions: false
      returnAssign: false

  # disallow unnecessary semicolons
  no-extra-semi: error

  # disallow overwriting functions written as function declarations
  no-func-assign: error

  # disallow function or variable declarations in nested blocks
  no-inner-declarations: error

  # disallow invalid regular expression strings in the RegExp constructor
  no-invalid-regexp: error

  # disallow irregular whitespace outside of strings and comments
  no-irregular-whitespace: error

  # disallow negation of the left operand of an in expression
  no-negated-in-lhs: off

  # disallow the use of object properties of the global object (Math and JSON) as functions
  no-obj-calls: error

  # disallow use of Object.prototypes builtins directly
  no-prototype-builtins: error

  # disallow multiple spaces in a regular expression literal
  no-regex-spaces: error

  # disallow sparse arrays
  no-sparse-arrays: error

  # Disallow template literal placeholder syntax in regular strings
  no-template-curly-in-string: off

  # Avoid code that looks like two expressions but is actually one
  no-unexpected-multiline: error

  # disallow unreachable statements after a return, throw, continue, or break statement
  no-unreachable: error

  # disallow return/throw/break/continue inside finally blocks
  no-unsafe-finally: error

  # disallow negating the left operand of relational operators
  no-unsafe-negation: error

  # disallow comparisons with the value NaN
  use-isnan: error

  # ensure JSDoc comments are valid
  valid-jsdoc: off

  # ensure that the results of typeof are compared against a valid string
  valid-typeof: error

  # ensure imports point to files/modules that can be resolved
  import/no-unresolved:
    - error
    - commonjs: true

  # ensure named imports coupled with named exports
  import/named: off

  # ensure default import coupled with default export
  import/default: off

  import/namespace: off

  # Helpful warnings:

  # disallow invalid exports, e.g. multiple defaults
  import/export: error

  # do not allow a default import name to match a named export
  import/no-named-as-default: error

  # warn on accessing default export property names that are also named exports
  import/no-named-as-default-member: error

  # disallow use of jsdoc-marked-deprecated imports
  import/no-deprecated: off

  # Forbid the use of extraneous packages
  import/no-extraneous-dependencies:
    - error
    - devDependencies: true
      optionalDependencies: false

  # Forbid mutable exports
  import/no-mutable-exports: error

  # Module systems:

  # disallow require()
  import/no-commonjs: off

  # disallow AMD require/define
  import/no-amd: error

  # No Node.js builtin modules
  import/no-nodejs-modules: off

  # Style guide:

  # disallow non-import statements appearing before import statements
  import/imports-first:
    - error
    - absolute-first

  # disallow duplicate imports
  import/no-duplicates: error

  # disallow namespace imports
  import/no-namespace: off

  # Ensure consistent use of file extension within the import path
  import/extensions:
    - off
    - never

  # Enforce a convention in module import order
  import/order:
    - off
    - groups:
        - builtin
        - external
        - internal
        - parent
        - sibling
        - index
      newlines-between: never

  # Require a newline after the last import/require in a group
  import/newline-after-import: error

  # Require modules with a single export to use a default export
  import/prefer-default-export: error

  # Restrict which files can be imported in a given folder
  import/no-restricted-paths: off

  # enforce return after a callback
  callback-return: off

  # require all requires be top-level
  global-require: error

  # enforces error handling in callbacks (node environment)
  handle-callback-err: off

  # disallow mixing regular variable and require declarations
  no-mixed-requires:
    - off
    - false

  # disallow use of new operator with the require function
  no-new-require: error

  # disallow string concatenation with __dirname and __filename
  no-path-concat: error

  # disallow use of process.env
  no-process-env: off

  # disallow process.exit()
  no-process-exit: off

  # restrict usage of specified node modules
  no-restricted-modules: off

  # disallow use of synchronous methods (off by default)
  no-sync: off

  # babel inserts `use strict;` for us
  strict:
    - error
    - never

  # enforce spacing inside array brackets
  array-bracket-spacing:
    - error
    - never

  # enforce spacing inside single-line blocks
  block-spacing:
    - error
    - always

  # enforce one true brace style
  brace-style:
    - error
    - 1tbs
    - allowSingleLine: true

  # require camel case names
  camelcase:
    - error
    - properties: never

  # enforce spacing before and after comma
  comma-spacing:
    - error
    - before: false
      after: true

  # enforce one true comma style
  comma-style:
    - error
    - last

  # disallow padding inside computed properties
  computed-property-spacing:
    - error
    - never

  # enforces consistent naming when capturing the current execution context
  consistent-this: off

  # enforce newline at the end of file, with no multiple empty lines
  eol-last: error

  # enforce spacing between functions and their invocations
  # TODO: enable, semver-minor
  func-call-spacing:
    - off
    - never

  # require function expressions to have a name
  func-names: warn

  # enforces use of function declarations or expressions
  func-style: off

  # Blacklist certain identifiers to prevent them being used
  id-blacklist: off

  # this option enforces minimum and maximum identifier lengths
  # (variable names, property names etc.)
  id-length: off

  # require identifiers to match the provided regular expression
  id-match: off

  # this option sets a specific tab width for your code
  indent:
    - error
    - 2
    - SwitchCase: 1
      VariableDeclarator: 1
      outerIIFEBody: 1

  # specify whether double or single quotes should be used in JSX attributes
  jsx-quotes:
    - off
    - prefer-double

  # enforces spacing between keys and values in object literal properties
  key-spacing:
    - error
    - beforeColon: false
      afterColon: true

  # require a space before & after certain keywords
  keyword-spacing:
    - error
    - before: true
      after: true
      overrides:
        return:
          after: true
        throw:
          after: true
        case:
          after: true

  # disallow mixed LF and CRLF as linebreaks
  linebreak-style:
    - error
    - unix

  # enforces empty lines around comments
  lines-around-comment: off

  # specify the maximum depth that blocks can be nested
  max-depth:
    - off
    - 4

  # specify the maximum length of a line in your program
  max-len:
    - error
    - 100
    - 2
    - ignoreUrls: true
      ignoreComments: false

  # specify the max number of lines in a file
  max-lines:
    - off
    - max: 300
      skipBlankLines: true
      skipComments: true

  # specify the maximum depth callbacks can be nested
  max-nested-callbacks: off

  # limits the number of parameters that can be used in the function declaration.
  max-params:
    - off
    - 3

  # specify the maximum number of statement allowed in a function
  max-statements:
    - off
    - 10

  # restrict the number of statements per line
  max-statements-per-line:
    - off
    - max: 1

  # require multiline ternary
  multiline-ternary: off

  # require a capital letter for constructors
  new-cap:
    - error
    - newIsCap: true
      capIsNew: false

  # disallow the omission of parentheses when invoking a constructor with no arguments
  new-parens: error

  # allow/disallow an empty newline after var statement
  newline-after-var: off

  newline-before-return: off

  # enforces new line after each method call in the chain to make it
  # more readable and easy to maintain
  newline-per-chained-call:
    - error
    - ignoreChainWithDepth: 4

  # disallow use of the Array constructor
  no-array-constructor: error

  # disallow use of bitwise operators
  # TODO: enable
  no-bitwise: off

  # disallow use of the continue statement
  no-continue: error

  # disallow comments inline after code
  no-inline-comments: off

  # disallow if as the only statement in an else block
  no-lonely-if: error

  # disallow un-parend mixes of different operators
  no-mixed-operators:
    - error
    - groups:
      - ['+', '-', '*', '/', '%', '**']
      - ['&', '|', '^', '~', '<<', '>>', '>>>']
      - ['==', '!=', '===', '!==', '>', '>=', '<', '<=']
      - ['&&', '||']
      - ['in', 'instanceof']
      allowSamePrecedence: false

  # disallow mixed spaces and tabs for indentation
  no-mixed-spaces-and-tabs: error

  # disallow multiple empty lines and only one newline at the end
  no-multiple-empty-lines:
    - error
    - max: 2
      maxEOF: 1

  # disallow negated conditions
  no-negated-condition: off

  # disallow nested ternary expressions
  no-nested-ternary: error

  # disallow use of the Object constructor
  no-new-object: error

  # disallow use of unary operators, ++ and --
  no-plusplus: off

  # disallow certain syntax forms
  no-restricted-syntax:
    - error
    - DebuggerStatement
    - ForInStatement
    - LabeledStatement
    - WithStatement

  # disallow space between function identifier and application
  no-spaced-func: error

  # disallow tab characters entirely
  # TODO: enable
  no-tabs: off

  # disallow the use of ternary operators
  no-ternary: off

  # disallow trailing whitespace at the end of lines
  no-trailing-spaces: error

  # disallow dangling underscores in identifiers
  no-underscore-dangle:
    - warn
    - allowAfterThis: false

  # disallow the use of Boolean literals in conditional expressions
  # also, prefer `a || b` over `a ? a : b`
  no-unneeded-ternary:
    - error
    - defaultAssignment: false

  # disallow whitespace before properties
  no-whitespace-before-property: error

  # require padding inside curly braces
  object-curly-spacing:
    - error
    - always

  # enforce line breaks between braces
  # TODO: enable once https://github.com/eslint/eslint/issues/6488 is resolved
  object-curly-newline:
    - off
    - ObjectExpression:
        minProperties: 0
        multiline: true
      ObjectPattern:
        minProperties: 0
        multiline: true

  # enforce "same line" or "multiple line" on object properties.
  object-property-newline:
    - error
    - allowMultiplePropertiesPerLine: true

  # allow just one var statement per function
  one-var:
    - error
    - never

  # require a newline around variable declaration
  one-var-declaration-per-line:
    - error
    - always

  # require assignment operator shorthand where possible or prohibit it entirely
  operator-assignment:
    - error
    - always

  # enforce operators to be placed before or after line breaks
  operator-linebreak: off

  # enforce padding within blocks
  padded-blocks:
    - error
    - never

  # require quotes around object literal property names
  quote-props:
    - error
    - as-needed
    - keywords: false
      unnecessary: true
      numbers: false

  # specify whether double or single quotes should be used
  quotes:
    - error
    - single
    - avoidEscape: true

  # do not require jsdoc
  require-jsdoc: off

  # require or disallow use of semicolons instead of ASI
  semi:
    - error
    - never

  # enforce spacing before and after semicolons
  semi-spacing:
    - error
    - before: false
      after: true

  # requires object keys to be sorted
  sort-keys:
    - off
    - asc
    - caseSensitive: false
      natural: true

  # sort variables within the same declaration block
  sort-vars: off

  # require or disallow space before blocks
  space-before-blocks: error

  # require or disallow space before function opening parenthesis
  space-before-function-paren:
    - error
    - anonymous: always
      named: never

  # require or disallow spaces inside parentheses
  space-in-parens:
    - error
    - never

  # require spaces around operators
  space-infix-ops: error

  # Require or disallow spaces before/after unary operators
  space-unary-ops:
    - error
    - words: true
      nonwords: false
      overrides: {}

  # require or disallow a space immediately following the# or /* in a comment
  spaced-comment:
    - error
    - always
    - exceptions: ['-', '+']
      markers: ['=', '!'] # space here to support sprockets directives

  # require or disallow the Unicode Byte Order Mark
  unicode-bom:
    - error
    - never

  # require regex literals to be wrapped in parentheses
  wrap-regex: off

  # enforce or disallow variable initializations at definition
  init-declarations: off

  # disallow the catch clause parameter name being the same as a variable in the outer scope
  no-catch-shadow: off

  # disallow deletion of variables
  no-delete-var: error

  # disallow labels that share a name with a variable
  no-label-var: error

  # disallow specific globals
  no-restricted-globals: off

  # disallow declaration of variables already declared in the outer scope
  no-shadow:
    - warn
    - builtinGlobals: true

  # disallow shadowing of names such as arguments
  no-shadow-restricted-names: error

  # disallow use of undeclared variables unless mentioned in a /*global */ block
  no-undef: error

  # disallow use of undefined when initializing variables
  no-undef-init: error

  # disallow use of undefined variable
  # TODO: enable?
  no-undefined: off

  # disallow declaration of variables that are not used in the code
  no-unused-vars:
    - error
    - vars: local
      args: after-used

  # disallow use of variables before they are defined
  no-use-before-define:
    - error
    - functions: false
